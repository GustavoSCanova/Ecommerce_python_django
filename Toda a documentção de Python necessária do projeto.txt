Python, documentação para criação de uma loja ecommerce. Arquivos de instalação e preparação do vs e nosso ambiente de trabalho!

Comandos abaixo para criação de arquivos necessários:

python -m venv venv  

venv\Scripts\activate.bat: Executa o bat de ativação da venv(ambiente virtual)

pip install django: comando pip é utilizado por diversos frameworks para instalação de aplicações dentro do vscode

pip install django-crispy-forms

pip install pillow

django-admin startproject loja . (Aqui vamos criar a pasta chave, onde as configurações principais serão feitas, conforme o necessário)

python manage.py startapp produto  (definindo o nome da pasta do projeto onde ficará as configurações necessárias para fazer alterações, as demais seguem a mesma finalidade!)

python manage.py startapp pedido

python manage.py startapp perfil

python manage.py check (Checar se não há nenhum problema com todas as instalações)

python manage.py migrate (criar toda a base de dados para depois criar o super usuário)

python manage.py createsuperuser

python manage.py runserver (rodar o servidor na porta 8080)

pip install pylint-django

python -m pip install django-debug-toolbar

python manage.py migrate - Faz a migração e alteração no projeto para que o makemigrations carregue toda a base de dados e os dados sejam viabilizados de forma correta.

python manage.py makemigrations - Faz a alteração na base de dados do django.

************************************************************************************************************* Começo settings.py

Após toda essa instalação, agora vai ser feita as configurações dentro da pasta loja em settings.py abaixo:

import os
from pathlib import Path
from django.contrib.messages import constants

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

TEMPLATES = [
    {
         'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Corrigido aqui
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


OBS: Aqui só vai servir de exemplo no momento, mas uma hora vai ser deixado de uso!

]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "pt-BR"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'templates/static')
STATIC_DIRS = [

os.path.join('static')

]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MESSAGE_TAGS = {

constants.DEBUG: 'alert-info',
constants.ERROR: 'alert-danger',
constants.INFO: 'alert-info',
constants.SUCCESS: 'alert-success',
constants.WARNING: 'alert-warning',

}

# Sessão em dias: 60s * 60 * 24h * 1d
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7

# Salvar a cada requisição
SESSION_SAVE_EVERY_REQUEST = False

# Serializer - Padrão JSON
# SESSION_SERIALIZAR = 'django.contrib.serializers.PickleSerializer'

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

*************************************************************************************************************** FIM settings.py



*************************************************************************************************************** Começo urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path("admin/", admin.site.urls),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# TODO: Remover debub toolbar

if settings.DEBUG:
    import debug_toolbar
    urlpatterns = [
        path('__debug__/', include(debug_toolbar.urls)),
    ] + urlpatterns


*************************************************************************************************************** FIM urls.py

